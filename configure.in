AC_INIT([GKC],[0.12],[mail@gkc.special-combo.net])


AM_INIT_AUTOMAKE([-Wall -Werror foreign]) 

AC_CONFIG_HEADERS([config.h])
AC_CONFIG_SRCDIR([src])

AC_CANONICAL_TARGET
AC_CANONICAL_HOST


#HERE
NO_ENV_CXXFLAGS=true
AC_PROG_CXX($CXX g++ sunCC icc)
AC_PROG_CC($CC   gcc sunC  ic)
AC_PROG_FC($FC gfortran ifort)

####################################
# Set code options

# profiling
AC_ARG_ENABLE([profile], AC_HELP_STRING([--enable-profil], [Helios is compiled with profiling support]), [profile=yes], [profile=no])
if test x$profile = xyes ; then
   AC_DEFINE([PROFILE], [], [enables profiling])
fi

# debugging
AC_ARG_ENABLE([debug], AC_HELP_STRING([--enable-debug], [enables debug output messages and information for debugging]), [debug=yes], [debug=no])
if test x$debug = xyes ; then
   AC_DEFINE([DEBUG], [], [enables debug output messages])
fi
 
case $host in 
       i?86-*-darwin*)   AC_DEFINE([OS_DARWIN],[],[A]) ;;
       i?86-*-Linux*)   AC_DEFINE([OS_LINUX],[],[B])   ;;
esac

# profiling
AC_ARG_ENABLE([fem], AC_HELP_STRING([--enable-fem], [Helios is compiled with Finite Element Support support]), [fem=yes], [fem=no])
if test x$fem = xyes ; then
   AC_DEFINE([HELIOS_FEM], [], [enables FEM support])
fi

AC_ARG_ENABLE([hypre], AC_HELP_STRING([--enable-hypre], [Helios is compiled with Finite Element Support support]), [hypre=yes], [hypre=no])
if test x$hypre = xyes ; then
   AC_DEFINE([HELIOS_HYPRE], [], [enables hypre support])
fi

#################
# Set Paths
#

#AC_ARG_WITH(geometry,
#  AC_HELP_STRING(
#    [--with-hdf5dir=geometry],
#    [use specified prefix install directory of hdf5 library]
#  ),
#  DIR_HDF5= "Geometry" + "$DIR_HDF5DIR"
#)
#AC_DEFINE(DIR_HDF5)

AC_ARG_WITH(hdf5dir,
  AC_HELP_STRING(
    [--with-hdf5dir=prefix],
    [use specified prefix install directory of hdf5 library]
  ),
  DIR_HDF5="$with_hdf5dir",
  DIR_HDF5="$DIR_HDF5DIR"
)
AC_SUBST(DIR_HDF5)




AC_ARG_WITH(blitzdir,
  AC_HELP_STRING(
    [--with-blitzdir=prefix],
    [use specified prefix install directory of Blitz++ library]
  ),
  DIR_BLITZ="$with_blitzdir",
  DIR_BLITZ="$DIR_BLITZDIR"
)
AC_SUBST(DIR_BLITZ)


AC_ARG_WITH(p3dfftdir,
  AC_HELP_STRING(
    [--with-p3dfftdir=prefix],
    [use specified prefix install directory of P3Dfft library]
  ),
  DIR_P3DFFT="$with_p3dfftdir",
  DIR_P3DFFT="$DIR_P3DFFT"
)
AC_SUBST(DIR_P3DFFT)

AC_ARG_WITH(femdir,
  AC_HELP_STRING(
    [--with-femdir=prefix],
    [use specified prefix install directory of libmesh library]
  ),
  DIR_FEM="$with_femdir",
  DIR_FEM="$DIR_FEMDIR"
)
AC_SUBST(DIR_FEM)


AC_ARG_WITH(hypredir,
  AC_HELP_STRING(
    [--with-hypredir=prefix],
    [use specified prefix install directory of libmesh library]
  ),
  DIR_HYPRE="$with_hypredir",
  DIR_HYPRE="$DIR_HYPRE"
)
AC_SUBST(DIR_HYPRE)


##########################3333
# Libary stuff

AC_ARG_ENABLE(static, AC_HELP_STRING([--enable-static], [Build with Helios using satic libraries.]), [static=yes], [static=no])           
if test x$static = xyes ; then
   # echo -e "mpi"
   AM_CONDITIONAL([STATIC], [test x$static = xyes])

fi


AC_ARG_ENABLE(shared, AC_HELP_STRING([--enable-shared], [Build with Helios using shared libraries.]), [shared=no], [static=yes])           
if test x$shared = xyes ; then
   # echo -e "mpi"
   AM_CONDITIONAL([SHARED], [test x$shared = xyes])
fi

AC_ARG_ENABLE(eigv_slepc, AC_HELP_STRING([--enable-eigv-slepc], [Enable Eigenvalue Caluclations with slepc]), [eigv_slepc=yes], [eigv_slepc=no])           
if test x$eigv_slepc = xyes ; then
   AM_CONDITIONAL([WITH_SLEPC], [test x$eigv_slepc = xyes])
   AC_DEFINE([HELIOS_PETSC], [], [Defined when compiled parallel version])
   AC_DEFINE([HELIOS_SLEPC], [], [Defined when compiled parallel version])
   DIR_PETSC=$PETSC_DIR
   AC_SUBST(DIR_PETSC)
   DIR_SLEPC=$SLEPC_DIR
   AC_SUBST(DIR_SLEPC)
fi


#AC_ARG_ENABLE(static, AC_HELP_STRING([--enable-static], [Static linking of HDF5 library.]), [static=yes], [static=no])           
#if test x$static = xyes ; then
#   # echo -e "mpi"
#   AM_CONDITIONAL([HDF5_STATIC], [test x$satic = xyes])
#    HDF5_STATIC="x$static",
#
#fi

#AC_SUBST(HDF5_STATIC)




##############################################################################
# Configure parallel/serial run mode
#
mpi=no
openmp=no
opencl=no

AC_ARG_ENABLE(mpi, AC_HELP_STRING([--enable-mpi], [Build with MPI support.]), [mpi=yes], [mpi=no])           
if test x$mpi = xyes ; then
   # echo -e "mpi"
   AC_DEFINE([HELIOS_PARALLEL], [], [Defined when compiled parallel version])
   AC_DEFINE([HELIOS_PARALLEL_MPI], [], [Defined when compiled parallel version with MPI])
   AM_CONDITIONAL([MPI], [test x$mpi = xyes])
fi




AC_ARG_ENABLE(openmp, AC_HELP_STRING([--enable-openmp], [Build with OpenMP support.]), [openmp=yes], [openmp=no]) 
 echo " openmp = $openmp "
if test x$openmp = xyes ; then
   # echo -e "openmp"
   AC_DEFINE([HELIOS_PARALLEL], [], [Defined when compiled parallel version])
   AC_DEFINE([HELIOS_PARALLEL_OPENMP], [], [Defined when compiled with OpenMP support])
fi


AC_ARG_ENABLE(opencl, AC_HELP_STRING([--enable-opencl], [Build with OpenCL support.]), [opencl=yes], [opencl=no]) 
 echo " opencl = $opencl "
if test x$opencl = xyes ; then
   # echo -e "opencl"
   AC_DEFINE([HELIOS_PARALLEL], [], [Defined when compiled parallel version])
   AC_DEFINE([HELIOS_PARALLEL_OPENCL], [], [Defined when compiled with OpenCL support])
fi

if [[ "$mpi" == "no" -a "$openmp" == "no" ]] ; then 
    echo -e "SERIAL: no mpi, no openmp" 
   AC_DEFINE([SERIAL], [], [Defined when compiled serial version]) 
fi 

#########################################################################################################
#
#
#  Switch between different FFT libraries
#
#


################### p3dfft ####################################################
AC_ARG_ENABLE(p3dfft, AC_HELP_STRING([--enable-p3dfft], [Build with P3DFFT support.]), [p3dfft=yes], [p3dfft=no]) 

if test x$p3dfft = xyes ; then
   AC_DEFINE([P3DFFT], [], [Defined when compiled parallel version])
fi
# FFT Libarries
AM_CONDITIONAL([P3DFFT], [test x$p3dfft  = xyes])

################### fftw2 ####################################################
AC_ARG_ENABLE(fftw2, AC_HELP_STRING([--enable-fftw2], [Build with FFTW2 support.]), [fftw2=yes], [fftw2=no]) 
AC_ARG_WITH(fftw2dir,
  AC_HELP_STRING(
    [--with-fftw2dir=prefix],
    [use specified prefix install directory of fftw2 library]
  ),
  DIR_FFTW2="$with_fftw2dir",
)

AC_SUBST(DIR_FFTW2)
AM_CONDITIONAL([FFTW2], [test x$fftw2  = xyes])
if test x$fftw2 = xyes ; then
   AC_DEFINE([FFTW2], [], [Defined when compiled parallel version])
fi

################### fftw2-mpi ####################################################
AC_ARG_ENABLE(fftw2mpi, AC_HELP_STRING([--enable-fftw2mpi], [Build with FFTW2 MPI support.]), [fftw2mpi=yes], [fftw2mpi=no]) 
AC_ARG_WITH(fftw2mpidir,
  AC_HELP_STRING(
    [--with-fftw2mpidir=prefix],
    [use specified prefix install directory of fftw2 MPI library]
  ),
  DIR_FFTW2MPI="$with_fftw2mpidir",
)

AC_SUBST(DIR_FFTW2MPI)
AM_CONDITIONAL([FFTW2MPI], [test x$fftw2mpi  = xyes])
if test x$fftw2mpi = xyes ; then
   AC_DEFINE([FFTW2MPI], [], [Defined when compiled parallel version])
fi


################### fftw3 ####################################################

AC_ARG_ENABLE(fftw3, AC_HELP_STRING([--enable-fftw3], [Build with FFTW support.]), [fftw3=yes], [fftw3=no]) 
AC_ARG_WITH(fftw3dir,
  AC_HELP_STRING(
    [--with-fftw3dir=prefix],
    [use specified prefix install directory of fftw3 library]
  ),
  DIR_FFTW3="$with_fftw3dir",
)

AC_SUBST(DIR_FFTW3)
AM_CONDITIONAL([FFTW3],  [test x$fftw3  = xyes])
if test x$fftw3 = xyes ; then
   AC_DEFINE([FFTW3], [], [Defined when compiled parallel version])
fi

################### FFTW-3 MPI ####################################################

AC_ARG_ENABLE(fftw3mpi, AC_HELP_STRING([--enable-fftw3mpi], [Build with FFTW MPI support.]), [fftw3mpi=yes], [fftw3mpi=no]) 
AC_ARG_WITH(fftw3mpidir,
  AC_HELP_STRING(
    [--with-fftw3mpidir=prefix],
    [use specified prefix install directory of fftw3 library]
  ),
  DIR_FFTW3MPI="$with_fftw3mpidir",
)

AC_SUBST(DIR_FFTW3MPI)
AM_CONDITIONAL([FFTW3MPI],  [test x$fftw3mpi  = xyes])

if test x$fftw3mpi = xyes ; then
   AC_DEFINE([FFTW3MPI], [], [Defined when compiled parallel version])
fi

###############

AM_CONDITIONAL([MPI],    [test x$mpi = xyes])
AM_CONDITIONAL([STATIC], [test x$static  = xyes])
AM_CONDITIONAL([SHARED], [test x$shared  = xyes])
AM_CONDITIONAL([OPENMP], [test x$openmp  = xyes])
AM_CONDITIONAL([OPENCL], [test x$opencl  = xyes])


#
AM_CONDITIONAL([MPIP],   [test x$mpiP    = xyes])
AM_CONDITIONAL([LIBMESH],[test x$fem     = xyes])
AM_CONDITIONAL([HYPRE],  [test x$hypre   = xyes])
AM_CONDITIONAL([WITH_SLEPC], [test x$slepc  = xyes])



echo " -------serial/parallel----------"
if test x$p3dfft = xyes ; then 
  echo " PARALLEL: 2D Decomposition"
fi
if [["$mpi" == "yes" -a "$p3dfft" == "no" ]] ; then 
  echo " PARALLEL: 1D Decomposition"
fi
if test x$openmp = xyes ; then 
  echo " PARALLEL: PARALLEL_OPENMP "
fi
if test x$mpi != xyes && test x$openmp != xyes ; then 
  echo " SERIAL "
fi
echo " --------------------------------"



if test x$mpi = xyes ; then 
  echo " -------MPI Settings-------------"
fi

# We should later check this if we really need this ...
if test x$openmp = xyes ; then 
    CXXFLAGS+=-DBZ_THREADSAFE
fi





##############################################################################
# Set optimization flags for
# different compilers
#


# mpip profiling
AC_ARG_ENABLE(mpiP, AC_HELP_STRING([--enable-mpiP], [Link mpiP for profiling.]), [mpiP=yes], [mpiP=no]) 
AM_CONDITIONAL([MPIP], [test x$mpiP = xyes])

# static linking of intel mpi library, ...
static=no 

AC_ARG_ENABLE([static], AC_HELP_STRING([--enable-static], [Build with static linking of Intel MPI Library, ...]), [static=yes], [static=no])              
if test $static = yes ; then
  AC_DEFINE([STATIC], [], [enables static linking of Intel MPI Library, ...])
fi
AM_CONDITIONAL([STATIC], [test x$static = xyes])


# store environment variable CXXFLAGS 
CXXFLAGS_ENV=$CXXFLAGS
if test x$NO_ENV_CXXFLAGS = xtrue ; then
  CXXFLAGS=""
fi

# Intel Fortran 90 compiler: ifort
#if test x$FC = xifort ; then
#  AC_DEFINE([FC_IFORT], ,[Defined when compiling with intels ifort])
#  if test x$NO_ENV_CXXFLAGS = xtrue ; then
#    if test x$debug = xyes ; then
#      # CXXFLAGS+=" -gdwarf-2 -debug all"
#      # CXXFLAGS+=" -g -O0 "
#      CXXFLAGS+=" -g -O0 -debug extended -debug-parameters all -fpe0 -traceback -no-ftz -g -O0 -warn all -fpic "
#    else
#      if test x$profile = xyes ; then
#        CXXFLAGS+="-openmp-profile"
#      else
#        CXXFLAGS+=" -O3"
#      fi
#
#    CXXFLAGS+=" -fpe0 -traceback"
#    fi
#
#    if test x$openmp = xyes ; then
#      CXXFLAGS+=" -openmp -parallel"
#    fi
#  fi
#fi



# GNU C++ compiler
if test x$CXX = xg++ || test x$FC = xmpic++.openmpi ; then
  AC_DEFINE([CXX_GCC], , [Defined when compiling with g++])
  
  if test x$NO_ENV_CXXFLAGS = xtrue ; then
    if test x$debug = xyes ; then
      CXXFLAGS+=" -g -ggdb -O3 -Wall" # -Wextra"
    else
      if test x$profile = xyes ; then
        CXXFLAGS+=" -pg -O3"
      else
        CXXFLAGS+=" -O3 -Wall"
      fi
    fi

    if test x$openmp = xyes ; then
      # echo " openmp = $openmp : add -fopenmp to CXXFLAGS"
	  CXXFLAGS+=" -fopenmp"
    fi
      CXXFLAGS+=" -std=c++0x"
  fi
fi

# Sun Studio C++ compiler
if test x$CXX = xsunCC || test x$CXX = sunCC.openmpi ; then
  AC_DEFINE([CXX_SUNCC], , [Defined when compiling with SunCC])
  
  if test x$NO_ENV_CXXFLAGS = xtrue ; then
    if test x$debug = xyes ; then
      CXXFLAGS+=" -g -O0 +w2 "
    else
      if test x$profile = xyes ; then
        CXXFLAGS+=" -p -O5"
      else
        CXXFLAGS+=" -O5 +w "
      fi
    fi

    if test x$openmp = xyes ; then
	  CXXFLAGS+=" -openmp "
    fi
        CXXFLAGS+=" -library=stlport4"
  fi

  # depending on the distribution, we need use this in order __attribute__
fi

# Intel C++ compiler
if test x$CXX = xicc || test x$CXX = icc.openmpi ; then
  AC_DEFINE([CXX_ICC], , [Defined when compiling with Intels C++ compiler])
  
  if test x$NO_ENV_CXXFLAGS = xtrue ; then
    if test x$debug = xyes ; then
      CXXFLAGS+=" -g -O0 -Wcheck "
    else
      if test x$profile = xyes ; then
        CXXFLAGS+=" -p "
      else
        CXXFLAGS+=" -fast -vec "
      fi
    fi

    if test x$openmp = xyes ; then
	  CXXFLAGS+=" -openmp "
    fi
        CXXFLAGS+="-std=c++0x -Wall"
  fi

  # depending on the distribution, we need use this in order __attribute__
fi




AC_ARG_ENABLE(bzdebug, AC_HELP_STRING([--enable-bzdebug], [Build with boundary check with blitz++ (slow!).]), [bzdebug=yes], [bzdebug=no])           
if test x$bzdebug = xyes ; then
   CXXFLAGS+=" -DBZ_DEBUG"
fi

#CXXFLAGS+=" -DBZ_DEBUG"




echo " -------Compiler Settings -------"
if test x$static = xyes ; then 
  echo " static: $static (static linking of Intel-MPI library) "
fi
echo " CXX           =  $CXX"
echo " CXXFLAGS      = $CXXFLAGS "
echo " CXXFLAGS_USER = $CXXFLAGS_USER "
echo " LDFLAGS      = $LDFLAGS "
echo " LDFLAGS_USER = $LDFLAGS_USER "
echo " LIBS         = $LIBS "
echo " LIBS_USER    = $LIBS_USER "
echo " --------------------------------"

echo " HDF5   DIR    = $DIR_HDF5 "
echo " BLITZ  DIR    = $DIR_BLITZ "


AC_CONFIG_FILES([
  Makefile
  src/Makefile	
])
AC_OUTPUT 

# Create output
echo \
===============================================================================
echo -e "Configure Summary: " 
echo -e Compiler:  $FC
if test x$NO_ENV_CXXFLAGS = xtrue ; then
  echo -e Compiler Flags: $CXXFLAGS \(not included from env CXXFLAGS: $CXXFLAGS_ENV\)
else
  echo -e Compiler Flags: $CXXFLAGS \(included from env CXXFLAGS: $CXXFLAGS_ENV\)
fi
echo -e " additional user compiler/linker flags and libraries can be set with"
echo -e " the environment variables: CXXFLAGS_USER, LDFLAGS_USER, LIBS_USER: "
echo -e " e.g.: env CXXFLAGS_USER=\" -O0\" ./configure" 
echo -e "CXXFLAGS_USER = $CXXFLAGS_USER"
echo -e OpenMP: $openmp
echo -e OpenCL: $opencl
echo -e MPI: $mpi
if test x$mpi = xyes ; then 
    echo -e "With MPI " 
fi
echo -e P3DFFT: $p3dfft
if test x$p3dfft = xyes ; then 
    echo -e "With P3DFFT " 
fi


echo -e " Type in \" make \" now ... "
