/* 
! Gamma/Error functions for Fortran version 2.0a
! --single-----double------quadruple---;----------defined by-----------------
!   gamma(x)   dgamma(x)   qgamma(x)   ;\int_0^\infty t^{x-1}e^{-t} dt
!   lgamma(x)  dlgamma(x)  qlgamma(x)  ;\log \Gamma(x)
!   cgamma(z)  cdgamma(z)  cqgamma(z)  ;\int_0^\infty t^{z-1}e^{-t} dt
!   clgamma(z) cdlgamma(z) cqlgamma(z) ;\log \Gamma(z)
!   erfc(x)    derfc(x)    qerfc(x)    ;2/\std::sqrt{\pi}\int_x^\infty e^{-t^2} dt
!   erf(x)     derf(x)     qerf(x)     ;2/\std::sqrt{\pi}\int_0^x e^{-t^2} dt
!   cerfc(z)   cderfc(z)   cqerfc(z)   ;2/\std::sqrt{\pi}\int_z^\infty e^{-t^2} dt
!   cerf(z)    cderf(z)    cqerf(z)    ;2/\std::sqrt{\pi}\int_0^z e^{-t^2} dt
!
 *  Author : Paul P. Hilscher (philscher@special-combo.net) 
 *  Description :
 *
 *  License : FreeBSD licesnce (see below) or GPLv3(or any later version)
 *  
 *
 *  Notes : 
 *		Copyright (c) <year>, <copyright holder>
	All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the <organization> nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY std::expRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * License for the error (complementary) functions
    Copyright(C) 1996 Takuya OOURA (email: ooura@mmm.t.u-tokyo.ac.jp).
    You may use, copy, modify this code for any purpose and 
    without fee. You may distribute this ORIGINAL package.
 *
 *
 *
 */ 

#include "SpecialMath.h"

/* Complementary Error Function */
 cmplxf MathFunctions::erfc(cmplxf x) {

    const float  
       pv = 9.03777677e+00,
       ph = 4.76888839e+00,
       p0 = 3.92213346e-01,
       p1 = 1.49181256e-01,
       p2 = 2.15823157e-02,
       p3 = 1.18760964e-03,
       p4 = 2.48565745e-05,
       p5 = 1.97879468e-07,
       q0 = 1.20830487e-01;

    const float
       q1= 1.08747438e+00,
       q2= 3.02076217e+00,
       q3= 5.92069385e+00,
       q4= 9.78726942e+00,
       q5= 1.46204889e+01,
       r0= 2.21293361e-01,
       r1= 2.72957057e-01,
       r2= 6.40298026e-02,
       r3= 5.71296931e-03;

     const float
       r4= 1.93880223e-04,
       r5= 2.50263215e-06,
       r6= 1.22871857e-08,
       s1= 4.83321947e-01,
       s2= 1.93328779e+00,
       s3= 4.34989752e+00,
       s4= 7.73315115e+00,
       s5= 1.20830487e+01,
       s6= 1.73995901e+01;


      cmplxf z, y=x*x;

      if(std::abs(std::real(x))+std::abs(std::imag(x)) < ph) {
        const cmplxf z=std::exp(pv*x);
        if(std::real(z) >= 0.) 
          y=std::exp(-y)*x*(p5/(y+q5)+p4/(y+q4) +p3/(y+q3)+p2/(y+q2)+p1/(y+q1) +p0/(y+q0))+2.f/(1.f+z);
        else
          y=std::exp(-y)*x*(r6/(y+s6)+r5/(y+s5) +r4/(y+s4)+r3/(y+s3)+r2/(y+s2) +r1/(y+s1)+r0/y)+2.f/(1.f-z);
      } else {
        y=std::exp(-y)*x*(p5/(y+q5)+p4/(y+q4)+p3/(y+q3)+p2/(y+q2)+p1/(y+q1)    +p0/(y+q0));
        if(std::real(x) < 0.) y=y+2.f;
     }
      return y;
    };


cmplxd MathFunctions::erfc(cmplxd x) {

     const double  pv= 1.27813464856668857e+01;
     const double  ph= 6.64067324283344283e+00;
     const double  p0= 2.94608570191793668e-01;
     const double  p1= 1.81694307871527086e-01;
     const double  p2= 6.91087778921425355e-02;
     const double  p3= 1.62114197106901582e-02;
     const double  p4= 2.34533471539159422e-03;
     const double  p5= 2.09259199579049675e-04;
     const double  p6= 1.15149016557480535e-05;
     
     const double  p7= 3.90779571296927748e-07;
     const double  p8= 8.17898509247247602e-09;
     const double  p9= 1.05575446466983499e-10;
     const double  p10= 8.40470321453263734e-13;
     const double  p11= 4.12646136715431977e-15;
     const double  p12= 1.24947948599560084e-17;
     const double  q0= 6.04152433382652546e-02;
     const double  q1= 5.43737190044387291e-01;
     const double  q2= 1.51038108345663136e+00;
     
      const double  q3= 2.96034692357499747e+00;
     const double  q4= 4.89363471039948562e+00;
     const double  q5= 7.31024444393009580e+00;
     const double  q6= 1.02101761241668280e+01;
     const double  q7= 1.35934297511096823e+01;
     const double  q8= 1.74600053247586586e+01;
     const double  q9= 2.18099028451137569e+01;
     const double  q10= 2.66431223121749773e+01;
     const double  q11= 3.19596637259423197e+01;
     
      const double  q12= 3.77595270864157841e+01;
     const double  r0= 1.56478036351085356e-01;
     const double  r1= 2.45771407110492625e-01;
     const double  r2= 1.19035163906534275e-01;
     const double  r3= 3.55561834455977740e-02;
     const double  r4= 6.55014550718381002e-03;
     const double  r5= 7.44188068433574137e-04;
     const double  r6= 5.21447276257559040e-05;
     const double  r7= 2.25337799750608244e-06;
     
      const double  r8= 6.00556181041662576e-08;
     const double  r9= 9.87118243564461826e-10;
     const double  r10= 1.00064645539515792e-11;
     const double  r11= 6.25587539334288736e-14;
     const double  r12= 2.41207864479170276e-16;
     const double  s1= 2.41660973353061018e-01;
     const double  s2= 9.66643893412244073e-01;
     const double  s3= 2.17494876017754917e+00;
     const double  s4= 3.86657557364897629e+00;
     const double  s5= 6.04152433382652546e+00;
     const double  s6= 8.69979504071019666e+00;
     const double  s7= 1.18413876942999899e+01;
     const double  s8= 1.54663022945959052e+01;
     const double  s9= 1.95745388415979425e+01;
     const double  s10= 2.41660973353061018e+01;
     const double  s11= 2.92409777757203832e+01;
     const double  s12= 3.47991801628407866e+01;
     
      cmplxd y=x*x;

      if(std::abs(std::real(x))+std::abs(std::imag(x)) < ph) {
        const cmplxd z=std::exp(pv*x);
        
        if(std::real(z) >= 0.) {
           
          y = std::exp(-y)*x*(p12/(y+q12)+p11/(y+q11)
                +p10/(y+q10)+p9/(y+q9)+p8/(y+q8)+p7/(y+q7)
                +p6/(y+q6)+p5/(y+q5)+p4/(y+q4)+p3/(y+q3)
                +p2/(y+q2)+p1/(y+q1)+p0/(y+q0))+2./(1.+z);

        } else {
            
           y = std::exp(-y)*x*(r12/(y+s12)+r11/(y+s11)
                 +r10/(y+s10)+r9/(y+s9)+r8/(y+s8)+r7/(y+s7)
                 +r6/(y+s6)+r5/(y+s5)+r4/(y+s4)+r3/(y+s3)
                 +r2/(y+s2)+r1/(y+s1)+r0/y)+2./(1.-z);

       }
      } else {
       
            y = std::exp(-y)*x*(p12/(y+q12)+p11/(y+q11)
                +p10/(y+q10)+p9/(y+q9)+p8/(y+q8)+p7/(y+q7)
                 +p6/(y+q6)+p5/(y+q5)+p4/(y+q4)+p3/(y+q3)
                +p2/(y+q2)+p1/(y+q1)+p0/(y+q0));
        
            if(std::real(x) <= 0) y=y+2.;
      }
          
      return y;

 } 
 
/* 
      complex quad erfc(complex quad x) {

        const quad
       pv= 1.8419880743036792792631929248006767493q+01,
       ph= 9.4599403715183963963159646240033837464q+00,
       p0= 2.1093083061644187538279122968913808152q-01,
       p1= 1.6713797949733065528971052035163045322q-01,
       p2= 1.0494102880451803704489103456267864462q-01,
       p3= 5.2209624806229062497556308453704817574q-02,
       p4= 2.0582158194044619069754225289969978299q-02,
       p5= 6.4293391618431334949721030322694803569q-03,
       p6= 1.5913908100149480106505036886507485785q-03,
       p7= 3.1212060500464898607481297780989148689q-04,
       p8= 4.8506855193831619356742051276480109919q-05,
       p9= 5.9733626677651815061875193953000538326q-06,
       p10= 5.8286735523223186734841193923199386322q-07,
       p11= 4.5066690471880700341073630648957059945q-08,
       p12= 2.7610653454261808871589140980422088532q-09,
       p13= 1.3403949680961254958324655659147790094q-10,
       p14= 5.1561314110869289752886735305964573946q-12,
       p15= 1.5716297853674992841622413214543994197q-13
       p16= 3.7958724379391814374198930599398267061q-15,
       p17= 7.2645388829894728683842661597496303959q-17,
       p18= 1.1016397065175311063529497475707242525q-18,
       p19= 1.3237506731591609005566634525737840832q-20,
       p20= 1.2603985415835627864680027724651354389q-22,
       p21= 9.5092151781247278003169665785149729821q-25,
       p22= 5.6848177046496801634666761604409403206q-27,
       p23= 2.6929202705338711046737832028758053393q-29,
       p24= 1.0108006977320702265677957534508423789q-31
       p25= 3.0063715680065086923565072577882673057q-34,
       p26= 7.0852448481490904907112832127691803349q-37;

       const quad
       q0= 2.9088820866572159615394846141476878557q-02,
       q1= 2.6179938779914943653855361527329190702q-01,
       q2= 7.2722052166430399038487115353692196393q-01,
       q3= 1.4253522224620358211543474609323670493q+00,
       q4= 2.3561944901923449288469825374596271631q+00,
       q5= 3.5197473248552313134627763831187023054q+00,
       q6= 4.9160107264506949750017289979095924762q+00,
       q7= 6.5449846949787359134638403818322976754q+00,
       q8= 8.4066692304393541288491105348868179031q+00,
       q9= 1.0501064332832549621157539457073153159q+01,
       q10= 1.2828170002158322390389127148391303444q+01,
       q11= 1.5387986238416672436543873608841268757q+01,
       q12= 1.8180513041607599759621778838423049098q+01,
       q13= 2.1205750411731104359622842837136644468q+01,
       q14= 2.4463698348787186236547065604982054867q+01,
       q15= 2.7954356852775845390394447141959280294q+01,
       q16= 3.1677725923697081821164987448068320749q+01,
       q17= 3.5633805561550895528858686523309176233q+01,
       q18= 3.9822595766337286513475544367681846745q+01,
       q19= 4.4244096538056254775015560981186332286q+01,
       q20= 4.8898307876707800313478736363822632855q+01,
       q21= 5.3785229782291923128865070515590748453q+01,
       q22= 5.8904862254808623221174563436490679079q+01,
       q23= 6.4257205294257900590407215126522424733q+01,
       q24= 6.9842258900639755236563025585685985416q+01,
       q25= 7.5660023073954187159641994813981361128q+01,
       q26= 8.1710497814201196359644122811408551868q+01;

     const quad
       r0= 1.0857833597842664924141880507518822324q-01,
       r1= 1.9330394605384376865851659517702988226q-01,
       r2= 1.3634629684679999083131393208557974008q-01,
       r3= 7.6204577450604403788088248675471849578q-02,
       r4= 3.3748451951221171387030636574487677141q-02,
       r5= 1.1843000251292400843913857684704052043q-02,
       r6= 3.2930983812757205929921213829383580821q-03,
       r7= 7.2557574646222760967368809292892366817q-04,
       r8= 1.2667645289367856821531300675005701424q-04,
       r9= 1.7524438664090954799894562703988992670q-05,
       r10= 1.9210002539217758384351411001702958461q-06,
       r11= 1.6685753127194156512431242433234203465q-07,
       r12= 1.1484161468186100454021914187739990566q-08,
       r13= 6.2630784459909945721312231747915945961q-10,
       r14= 2.7065216004464856039123247342635784082q-11,
       r15= 9.2676629018209927646524369276088075961q-13,
       r16= 2.5145718215575387941885792873856026053q-14,
       r17= 5.4062104214337911880413049229210178595q-16,
       r18= 9.2099427616964263777001122276945386232q-18,
       r19= 1.2432429403206980797482152563988923532q-19,
       r20= 1.3298117235769445146920469835700830835q-21,
       r21= 1.1270920794418483512403852639398106151q-23,
       r22= 7.5694395178532891627960685040600391752q-26,
       r23= 4.0281268032076992671072314251173518774q-28,
       r24= 1.6985472346741765564942981815307583270q-30,
       r25= 5.6752788970027027984246568768226680280q-33,
       r26= 1.5025601745064174185565587049015131885q-35,

     const quad
       s1= 1.1635528346628863846157938456590751423q-01,
       s2= 4.6542113386515455384631753826363005692q-01,
       s3= 1.0471975511965977461542144610931676281q+00,
       s4= 1.8616845354606182153852701530545202277q+00,
       s5= 2.9088820866572159615394846141476878557q+00,
       s6= 4.1887902047863909846168578443726705123q+00,
       s7= 5.7014088898481432846173898437294681972q+00,
       s8= 7.4467381418424728615410806122180809107q+00,
       s9= 9.4247779607693797153879301498385086526q+00,
       s10= 1.1635528346628863846157938456590751423q+01,
       s11= 1.4078989299420925253851105532474809222q+01,
       s12= 1.6755160819145563938467431377490682049q+01,
       s13= 1.9664042905802779900006915991638369905q+01,
       s14= 2.2805635559392573138469559374917872789q+01,
       s15= 2.6179938779914943653855361527329190702q+01,
       s16= 2.9786952567369891446164322448872323643q+01,
       s17= 3.3626676921757416515396442139547271612q+01,
       s18= 3.7699111843077518861551720599354034610q+01,
       s19= 4.2004257331330198484630157828292612637q+01,
       s20= 4.6542113386515455384631753826363005692q+01,
       s21= 5.1312680008633289561556508593565213775q+01,
       s22= 5.6315957197683701015404422129899236887q+01,
       s23= 6.1551944953666689746175494435365075027q+01,
       s24= 6.7020643276582255753869725509962728196q+01,
       s25= 7.2722052166430399038487115353692196393q+01,
       s26= 7.8656171623211119600027663966553479619q+01;
     
       
      complex quad y=x*x
      if(abs(qstd::real(x))+abs(qimag(x)) < ph) {
        z=std::exp(pv*x)
        if(qstd::real(z) >= 0) {
            y=std::exp(-y)*x*(p26/(y+q26)
           +p25/(y+q25)+p24/(y+q24)+p23/(y+q23)
           +p22/(y+q22)+p21/(y+q21)+p20/(y+q20)
           +p19/(y+q19)+p18/(y+q18)+p17/(y+q17)
           +p16/(y+q16)+p15/(y+q15)+p14/(y+q14)
           +p13/(y+q13)+p12/(y+q12)+p11/(y+q11)
           +p10/(y+q10)+p9/(y+q9)+p8/(y+q8)+p7/(y+q7)
           +p6/(y+q6)+p5/(y+q5)+p4/(y+q4)+p3/(y+q3)
           +p2/(y+q2)+p1/(y+q1)+p0/(y+q0))+2/(1+z);
        }
          y=std::exp(-y)*x*(r26/(y+s26)
           +r25/(y+s25)+r24/(y+s24)+r23/(y+s23)
           +r22/(y+s22)+r21/(y+s21)+r20/(y+s20)
           +r19/(y+s19)+r18/(y+s18)+r17/(y+s17)
           +r16/(y+s16)+r15/(y+s15)+r14/(y+s14)
           +r13/(y+s13)+r12/(y+s12)+r11/(y+s11)
           +r10/(y+s10)+r9/(y+s9)+r8/(y+s8)+r7/(y+s7)
           +r6/(y+s6)+r5/(y+s5)+r4/(y+s4)+r3/(y+s3)
           +r2/(y+s2)+r1/(y+s1)+r0/y)+2/(1-z);
      } else {
        y=std::exp(-y)*x*(p26/(y+q26)
         +p25/(y+q25)+p24/(y+q24)+p23/(y+q23)
         +p22/(y+q22)+p21/(y+q21)+p20/(y+q20)
         +p19/(y+q19)+p18/(y+q18)+p17/(y+q17)
         +p16/(y+q16)+p15/(y+q15)+p14/(y+q14)
         +p13/(y+q13)+p12/(y+q12)+p11/(y+q11)
         +p10/(y+q10)+p9/(y+q9)+p8/(y+q8)+p7/(y+q7)
         +p6/(y+q6)+p5/(y+q5)+p4/(y+q4)+p3/(y+q3)
         +p2/(y+q2)+p1/(y+q1)+p0/(y+q0));
        if(qstd::real(x) < 0) y=y+2;
      }
      return y;
}

 * */

/******************* Bessel Functions **************************/

double MathFunctions::i0(double x)
{
    int k;
    double w, t, y;
    static double a[65] = {
        8.5246820682016865877e-11, 2.5966600546497407288e-9, 
        7.9689994568640180274e-8, 1.9906710409667748239e-6, 
        4.0312469446528002532e-5, 6.4499871606224265421e-4, 
        0.0079012345761930579108, 0.071111111109207045212, 
        0.444444444444724909, 1.7777777777777532045, 
        4.0000000000000011182, 3.99999999999999998, 
        1.0000000000000000001, 
        1.1520919130377195927e-10, 2.2287613013610985225e-9, 
        8.1903951930694585113e-8, 1.9821560631611544984e-6, 
        4.0335461940910133184e-5, 6.4495330974432203401e-4, 
        0.0079013012611467520626, 0.071111038160875566622, 
        0.44444450319062699316, 1.7777777439146450067, 
        4.0000000132337935071, 3.9999999968569015366, 
        1.0000000003426703174, 
        1.5476870780515238488e-10, 1.2685004214732975355e-9, 
        9.2776861851114223267e-8, 1.9063070109379044378e-6, 
        4.0698004389917945832e-5, 6.4370447244298070713e-4, 
        0.0079044749458444976958, 0.071105052411749363882, 
        0.44445280640924755082, 1.7777694934432109713, 
        4.0000055808824003386, 3.9999977081165740932, 
        1.0000004333949319118, 
        2.0675200625006793075e-10, -6.1689554705125681442e-10, 
        1.2436765915401571654e-7, 1.5830429403520613423e-6, 
        4.2947227560776583326e-5, 6.3249861665073441312e-4, 
        0.0079454472840953930811, 0.070994327785661860575, 
        0.44467219586283000332, 1.7774588182255374745, 
        4.0003038986252717972, 3.9998233869142057195, 
        1.0000472932961288324, 
        2.7475684794982708655e-10, -3.8991472076521332023e-9, 
        1.9730170483976049388e-7, 5.9651531561967674521e-7, 
        5.1992971474748995357e-5, 5.7327338675433770752e-4, 
        0.0082293143836530412024, 0.069990934858728039037, 
        0.44726764292723985087, 1.7726685170014087784, 
        4.0062907863712704432, 3.9952750700487845355, 
        1.0016354346654179322
    };
    static double b[70] = {
        6.7852367144945531383e-8, 4.6266061382821826854e-7, 
        6.9703135812354071774e-6, 7.6637663462953234134e-5, 
        7.9113515222612691636e-4, 0.0073401204731103808981, 
        0.060677114958668837046, 0.43994941411651569622, 
        2.7420017097661750609, 14.289661921740860534, 
        59.820609640320710779, 188.78998681199150629, 
        399.8731367825601118, 427.56411572180478514, 
        1.8042097874891098754e-7, 1.2277164312044637357e-6, 
        1.8484393221474274861e-5, 2.0293995900091309208e-4, 
        0.0020918539850246207459, 0.019375315654033949297, 
        0.15985869016767185908, 1.1565260527420641724, 
        7.1896341224206072113, 37.354773811947484532, 
        155.80993164266268457, 489.5211371158540918, 
        1030.9147225169564806, 1093.5883545113746958, 
        4.8017305613187493564e-7, 3.261317843912380074e-6, 
        4.9073137508166159639e-5, 5.3806506676487583755e-4, 
        0.0055387918291051866561, 0.051223717488786549025, 
        0.42190298621367914765, 3.0463625987357355872, 
        18.895299447327733204, 97.915189029455461554, 
        407.13940115493494659, 1274.3088990480582632, 
        2670.9883037012547506, 2815.7166284662544712, 
        1.2789926338424623394e-6, 8.6718263067604918916e-6, 
        1.3041508821299929489e-4, 0.001428224737372747892, 
        0.014684070635768789378, 0.13561403190404185755, 
        1.1152592585977393953, 8.0387088559465389038, 
        49.761318895895479206, 257.2684232313529138, 
        1066.8543146269566231, 3328.3874581009636362, 
        6948.8586598121634874, 7288.4893398212481055, 
        3.409350368197032893e-6, 2.3079025203103376076e-5, 
        3.4691373283901830239e-4, 0.003794994977222908545, 
        0.038974209677945602145, 0.3594948380414878371, 
        2.9522878893539528226, 21.246564609514287056, 
        131.28727387146173141, 677.38107093296675421, 
        2802.3724744545046518, 8718.5731420798254081, 
        18141.348781638832286, 18948.925349296308859
    };
    static double c[45] = {
        2.5568678676452702768e-15, 3.0393953792305924324e-14, 
        6.3343751991094840009e-13, 1.5041298011833009649e-11, 
        4.4569436918556541414e-10, 1.746393051427167951e-8, 
        1.0059224011079852317e-6, 1.0729838945088577089e-4, 
        0.05150322693642527738, 
        5.2527963991711562216e-15, 7.202118481421005641e-15, 
        7.2561421229904797156e-13, 1.482312146673104251e-11, 
        4.4602670450376245434e-10, 1.7463600061788679671e-8, 
        1.005922609132234756e-6, 1.0729838937545111487e-4, 
        0.051503226936437300716, 
        1.3365917359358069908e-14, -1.2932643065888544835e-13, 
        1.7450199447905602915e-12, 1.0419051209056979788e-11, 
        4.58047881980598326e-10, 1.7442405450073548966e-8, 
        1.0059461453281292278e-6, 1.0729837434500161228e-4, 
        0.051503226940658446941, 
        5.3771611477352308649e-14, -1.1396193006413731702e-12, 
        1.2858641335221653409e-11, -5.9802086004570057703e-11, 
        7.3666894305929510222e-10, 1.6731837150730356448e-8, 
        1.0070831435812128922e-6, 1.0729733111203704813e-4, 
        0.051503227360726294675, 
        3.7819492084858931093e-14, -4.8600496888588034879e-13, 
        1.6898350504817224909e-12, 4.5884624327524255865e-11, 
        1.2521615963377513729e-10, 1.8959658437754727957e-8, 
        1.0020716710561353622e-6, 1.073037119856927559e-4, 
        0.05150322383300230775
    };

    w = std::abs(x);
    if (w < 8.5) {
        t = w * w * 0.0625;
        k = 13 * ((int) t);
        y = (((((((((((a[k] * t + a[k + 1]) * t + 
            a[k + 2]) * t + a[k + 3]) * t + a[k + 4]) * t + 
            a[k + 5]) * t + a[k + 6]) * t + a[k + 7]) * t + 
            a[k + 8]) * t + a[k + 9]) * t + a[k + 10]) * t + 
            a[k + 11]) * t + a[k + 12];
    } else if (w < 12.5) {
        k = (int) w;
        t = w - k;
        k = 14 * (k - 8);
        y = ((((((((((((b[k] * t + b[k + 1]) * t + 
            b[k + 2]) * t + b[k + 3]) * t + b[k + 4]) * t + 
            b[k + 5]) * t + b[k + 6]) * t + b[k + 7]) * t + 
            b[k + 8]) * t + b[k + 9]) * t + b[k + 10]) * t + 
            b[k + 11]) * t + b[k + 12]) * t + b[k + 13];
    } else {
        t = 60 / w;
        k = 9 * ((int) t);
        y = ((((((((c[k] * t + c[k + 1]) * t + 
            c[k + 2]) * t + c[k + 3]) * t + c[k + 4]) * t + 
            c[k + 5]) * t + c[k + 6]) * t + c[k + 7]) * t + 
            c[k + 8]) * std::sqrt(t) * std::exp(w);
    }
    return y;
}


double MathFunctions::i1(double x)
{
    int k;
    double w, t, y;
    static double a[60] = {
        1.2787464404046789181e-10, 3.5705860060088241077e-9, 
        9.961153761934733504e-8, 2.2395070088633043177e-6, 
        4.0312466928887462346e-5, 5.6437387840203722356e-4, 
        0.0059259259312934746096, 0.04444444444349900887, 
        0.22222222222232042719, 0.66666666666666139867, 
        1.0000000000000001106, 0.49999999999999999962, 
        1.7281952384448634449e-10, 3.064720455997639013e-9, 
        1.0237662138842827028e-7, 2.2299494417341498163e-6, 
        4.0335364374929326943e-5, 5.6433440269141349899e-4, 
        0.0059259754885893798654, 0.04444439941088039787, 
        0.2222222511283502673, 0.66666665422146063244, 
        1.0000000032274936821, 0.49999999961866867205, 
        2.3216048939948030996e-10, 1.7443372702334489579e-9, 
        1.1596478963485415499e-7, 2.1446755518623035147e-6, 
        4.0697440347437076195e-5, 5.6324394900433192204e-4, 
        0.0059283484996093060678, 0.044440673899150997921, 
        0.2222263801685265786, 0.66666358151576732094, 
        1.0000013834029985337, 0.49999971643129650249, 
        3.1013758938255172562e-10, -8.4813676145611694984e-10, 
        1.5544980187411802596e-7, 1.7811109378708045726e-6, 
        4.2945322199060856985e-5, 5.5344850176852353639e-4, 
        0.0059590327716950614802, 0.044371611097707060659, 
        0.22233578241986401111, 0.6665474730046331531, 
        1.0000756505206705927, 0.49997803664415994554, 
        4.1214758313965020365e-10, -5.361331773534742944e-9, 
        2.4661360807517345161e-7, 6.7144593918926723203e-7, 
        5.1988027944945587571e-5, 5.0165568586065803067e-4, 
        0.0061717530047005289953, 0.043745229577317251404, 
        0.22363147971477747996, 0.6647546913111766024, 
        1.0015686689447547657, 0.49941120439785391891
    };
    static double b[70] = {
        6.6324787943143095845e-8, 4.5125928898466638619e-7, 
        6.7937793134877246623e-6, 7.4580507871505926302e-5, 
        7.6866382927334005919e-4, 0.0071185174803491859307, 
        0.058721838073486424416, 0.42473949281714196041, 
        2.6396965606282079123, 13.710008536637016903, 
        57.158647688180932003, 179.46182892089389037, 
        377.57997362398478619, 399.87313678256009819, 
        1.7652713206027939711e-7, 1.1988179244834708057e-6, 
        1.8037851545747139231e-5, 1.9775785516370314656e-4, 
        0.0020354870702829387283, 0.0188221641910322536, 
        0.15500485219010424263, 1.119010001056057321, 
        6.9391565185406617552, 35.948170579648649345, 
        149.41909525103032616, 467.42979492780642582, 
        979.04227423171290408, 1030.9147225169564443, 
        4.7022299276154507603e-7, 3.1878571710170115972e-6, 
        4.7940153875711448496e-5, 5.2496623508411440227e-4, 
        0.0053968661134780824779, 0.049837081920693776234, 
        0.40979593830387765545, 2.9533186922862948404, 
        18.278176130722516369, 94.47649715018912107, 
        391.66075612645333624, 1221.4182034643210345, 
        2548.6177980961291004, 2670.9883037012546541, 
        1.2535083724002034147e-6, 8.484587142065570825e-6, 
        1.2753227372734042108e-4, 0.0013950105363562648921, 
        0.014325473993765291906, 0.13212452778932829125, 
        1.0849287786885151432, 7.8068089156260172673, 
        48.232254570679165833, 248.80659424902394371, 
        1029.0736929484210803, 3200.5629438795801652, 
        6656.7749162019607914, 6948.8586598121632302, 
        3.3439394490599745013e-6, 2.2600596902211837757e-5, 
        3.3955927589987356838e-4, 0.0037105306061050972474, 
        0.038065263634919156421, 0.35068223415665236079, 
        2.8760027832105027316, 20.665999500843274339, 
        127.47939148516390205, 656.43636874254000885, 
        2709.524283793247992, 8407.1174233600734871, 
        17437.146284159740233, 18141.3487816388316
    };
    static double c[45] = {
        -2.8849790431465382128e-15, -3.5125350943844774657e-14, 
        -7.485086701370741975e-13, -1.8383904048277485153e-11, 
        -5.7303556446977223342e-10, -2.4449502737311496525e-8, 
        -1.6765373351766929724e-6, -3.2189516835265773471e-4, 
        0.051503226936425277377, 
        -5.8674306822281631119e-15, -9.4884898451194085565e-15, 
        -8.503386513660036434e-13, -1.8142997866945285736e-11, 
        -5.7340238386338193949e-10, -2.4449138101742183665e-8, 
        -1.6765375646678855842e-6, -3.2189516826945356325e-4, 
        0.051503226936412017608, 
        -1.4723362506764340882e-14, 1.3945147385179042899e-13, 
        -1.9618041857586930923e-12, -1.3343606394065121821e-11, 
        -5.8649674606973244159e-10, -2.4426060539669553778e-8, 
        -1.6765631828366988006e-6, -3.2189515191449587253e-4, 
        0.051503226931820146445, 
        -5.8203519372580372987e-14, 1.2266326995309845825e-12, 
        -1.3921625844526453237e-11, 6.2228025878281625469e-11, 
        -8.8636681342142794023e-10, -2.3661241616744818608e-8, 
        -1.6777870960740520557e-6, -3.2189402882677074318e-4, 
        0.051503226479551959376, 
        -4.5801527369223291722e-14, 6.7998819697143727209e-13, 
        -4.1624857909290468421e-12, -3.2849009406112440998e-11, 
        -3.247827569043111827e-10, -2.5739209934053714983e-8, 
        -1.6730566573215739195e-6, -3.2190010909008684076e-4, 
        0.05150322986693207715
    };

    w = fabs(x);
    if (w < 8.5) {
        t = w * w * 0.0625;
        k = 12 * ((int) t);
        y = (((((((((((a[k] * t + a[k + 1]) * t + 
            a[k + 2]) * t + a[k + 3]) * t + a[k + 4]) * t + 
            a[k + 5]) * t + a[k + 6]) * t + a[k + 7]) * t + 
            a[k + 8]) * t + a[k + 9]) * t + a[k + 10]) * t + 
            a[k + 11]) * w;
    } else if (w < 12.5) {
        k = (int) w;
        t = w - k;
        k = 14 * (k - 8);
        y = ((((((((((((b[k] * t + b[k + 1]) * t + 
            b[k + 2]) * t + b[k + 3]) * t + b[k + 4]) * t + 
            b[k + 5]) * t + b[k + 6]) * t + b[k + 7]) * t + 
            b[k + 8]) * t + b[k + 9]) * t + b[k + 10]) * t + 
            b[k + 11]) * t + b[k + 12]) * t + b[k + 13];
    } else {
        t = 60 / w;
        k = 9 * ((int) t);
        y = ((((((((c[k] * t + c[k + 1]) * t + 
            c[k + 2]) * t + c[k + 3]) * t + c[k + 4]) * t + 
            c[k + 5]) * t + c[k + 6]) * t + c[k + 7]) * t + 
            c[k + 8]) * std::sqrt(t) * std::exp(w);
    }
    return x < 0 ? -y : y;
}


