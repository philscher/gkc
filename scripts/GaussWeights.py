"""
*       Filename:  GaussWeights.h
 *    Description:  This file is autogenerated by scripts/GaussWeights.py
 *         Author:  Paul P. Hilscher (2010) 
"""

#ifndef __GAUSSWEIGHTS_H_

from pylab import *
from scipy.special.orthogonal import *


maxN = 256

def createGaussWeightsFile(file_name, HEADER_ID, var_prefix, roots_func):

    # Create GaussWeights.h

    # Add header

    gw_h = \
    """
/*
 * =====================================================================================
 *
 *       Filename:  GaussWeights.h
 *
 *    Description:  This file is autogenerated by scripts/GaussWeights.py
 *
 *         Author:  Paul P. Hilscher (2012) 
 *   
 * =====================================================================================
 */


#ifndef %s
#define %s

#define GAUSS_WEIGHTS_MAX %i


/* Merge all together */
// using from GSL glfixed
struct %sWeights 
{
    int     n;
    double *points;
    double *weights;
};


""" % ( HEADER_ID, HEADER_ID, maxN, var_prefix)



    for n in arange(1,maxN+1,1):
        GLpoints = roots_func(n)

        gw_h += "static double x_" + var_prefix + str(n) + "[" + str(n) + "] = {";
        for p in GLpoints[0]: gw_h += "%.17f," % p
        gw_h = gw_h[:-1] + "};" + '\n'
    
    
        gw_h += "static double w_" + var_prefix + str(n) + "[" + str(n) + "] = {";
        for p in GLpoints[1]: gw_h += "%.17f," % p
        gw_h = gw_h[:-1] + "};" + '\n' + '\n'
    

    gw_h += \
    """
static %sWeights %s_weights[] =
{

    """ % (var_prefix, var_prefix)
  
    for n in range(maxN):
        gw_h +=  "{   " + str(n) + ",     x_" + var_prefix + str(n+1) + ",    w_" + var_prefix + str(n+1) + "}," + '\n'


    gw_h = gw_h[:-2] + '\n' + "};" + '\n'

    gw_h += "#endif //%s" + HEADER_ID + '\n'

    
    fh = open(file_name, 'w')
    fh.write(gw_h)
    fh.close()


# need prefix because static initialization does not work (yet ?!)
integration = []
integration.append( ("GaussLegendreWeights.h", "GAUSS_LEGENDRE_WEIGHTS_H_", "Legendre" , p_roots) )
integration.append( ("GaussLaguerreWeights.h", "GAUSS_LAGUERRE_WEIGHTS_H_", "Laguerre" , l_roots) )
integration.append( ("RectangleWeights.h"    , "RECTANGLE_WEIGHTS_H_"     , "Rectangle", lambda N : (-1. + 2./N * arange(N), 2./N * ones(N)) ) )
integration.append( ("GaussHermiteWeights.h" , "GAUSS_HERMITE_WEIGHTS_H_" , "Hermite"  , h_roots) )
#integration.append( ("GaussJacobiWeights.h"  , "GAUSS_JACOBI_WEIGHTS_H_"  , "Jacobi"   , j_roots) )
integration.append( ("GaussChebychevFirstWeights.h" , "GAUSS_CHEBYCHEV_FIRST_WEIGHTS_H_" , "ChebychevFirst", t_roots) )
integration.append( ("GaussChebychevSecondWeights.h", "GAUSS_CHEBYCHEV_SECOND_JACOBI_WEIGHTS_H_" , "ChebychevSecond", u_roots) )

## Add radau and add labatto

for n in  integration : createGaussWeightsFile(n[0], n[1], n[2], n[3])


